# Recipes-browser (tls-ignored)

This `recipes-mini-browser` has a mini-browser made from gtk+3 and webkit2gtk

The RDEPENDS (run time dependencies) are webkitgtk and gtk+3

Follow the below recipe structure

```bash
recipes-browser
└── tls-mini-browser
    ├── CHANGELOG
    ├── files
    │   └── tls-mini-browser.c
    ├── tls-mini-browser_1.0.0.bb
    └── README - (You are currently reading me)
```

The default URL is `https://google.com`, modify the load_uri api in the `tls-mini-browser.c`

add these lines to `path/to/poky/build/conf/local.conf`

```bash
IMAGE_INSTALL:append = " tls-mini-browser webkitgtk gtk+3"
```

---

## Issues

When we run this application from terminal of the `core-image-sato`, we get the following error

```bash
libEGL warbibg: DRI2: failed to authenticate
Could not create EGL sharing context
```

This happens in embedded linux processors

The `tls-mini-browser.c` is is optimised by turning of the Hardware accelaration feature.

Solution 2: Turn off the Hardware accelation feature separately.

If the issue issue persist with this approach, use this below cmdline environment argument before running the browser application.

```bash
export WEBKIT_DISABLE_COMPOSITING_MODE=1
export WEBKIT_DISABLE_DMABUF_RENDERER=1
export GDK_RENDERING=image
export GSK_RENDERER=cairo
./tls-mini-browser
```

This issue will be resolved in next patch, the possible solution are listed below.

Solution 3: Adding lines in a wrapper shell script

This can be automatically done by creating the wrapper for executing the application

Modify the `.bb` file as follow

```bb
SUMMARY = "Mini Browser GTK4 WebKit Application"
DESCRIPTION = "A minimal fullscreen browser using GTK4 and WebKit"
LICENSE = "CLOSED"

SRC_URI = "file://mini-browser.c"

S = "${WORKDIR}"

# Dependencies for GTK3 and WebKit
DEPENDS = "gtk+3 webkitgtk"

# Runtime dependencies
RDEPENDS:${PN} = "gtk+3 webkitgtk"

# Inherit pkgconfig for pkg-config support
inherit pkgconfig

do_compile() {
    # Compile the application using pkg-config for GTK3 and WebKit
    ${CC} ${CFLAGS} ${LDFLAGS} \
        `pkg-config --cflags gtk+-3.0` \
        `pkg-config --cflags webkit2gtk-4.0` \
        ${S}/mini-browser.c \
        `pkg-config --libs gtk+-3.0` \
        `pkg-config --libs webkit2gtk-4.0` \
        -o mini-browser
}

do_install() {
    # Create binary directory
    install -d ${D}${bindir}
    
    # Install the binary
    install -m 0755 ${S}/mini-browser ${D}${bindir}/
    
    # Create a wrapper script with environment variables
    install -d ${D}${bindir}
    cat > ${D}${bindir}/mini-browser-wrapper << 'EOF'
#!/bin/bash
export WEBKIT_DISABLE_COMPOSITING_MODE=1
export WEBKIT_DISABLE_DMABUF_RENDERER=1
export GDK_RENDERING=image
export GSK_RENDERER=cairo
exec /usr/bin/mini-browser "$@"
EOF
    chmod +x ${D}${bindir}/mini-browser-wrapper
}

FILES:${PN} = "${bindir}/mini-browser ${bindir}/mini-browser-wrapper"
```

> Solution 4 for the issue is, install the hardware accelaration dependency
>
> ```bb
> IMAGE_INSTALL += "mini-browser gtk+3 webkitgtk mesa libdrm"
> ```
